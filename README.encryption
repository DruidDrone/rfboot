When a new project is created with "rftool create ProjectName" a new rfboot instance is created
with a unique RF channel SyncWord and XTEA key.

The use of encryption may seem overkill . Who cares to sniff the firmware in the air, you may ask.
In fact for a commercial project this can be a real concern. But even for a completely open
source project the use of encryption is essential. The reason is that without encryption,
the bootloader can easily be fooled to upload any code -by anyone- in the RF module's distance range.
This can be done on purpose or even accidentally, if for example someone (or you) try to upload
code to another module.
Note the difference with bootloaders such as optiboot or atmegaboot.
They dont need encryption, because code is transfered by wire, and
physical access to the module is required.

A very importand reason for me, it was to learn some things about encryption

I found that encryption is not slowing down the uploading process.
Due to the way the upload works, it is not any more complicated either.

For these reasons encryption is permanently enabled in rfboot. If for some reason you need
to disable encryption you have to edit the source code.

The firmware is uploaded to the atmega chip encrypted with XTEA algorithm in CBC mode.
As rfboot selects a different IV at every session, even if we upload the same file several times,
the data on the air will be different every time

The firmware is not encrypted in the atmega flash. When the bootloader is first installed with
"make xtal" or "make noxtal" the fuses are set so an ISP programmer cannot read the FLASH
but I have no solid information if atmega328 can withstand FLASH read attacks.

There is also the possibility that rfboot has some bug, and an exploit can trick it to
reveal the code somehow.

Generally speaking, no warranties that the code works, offers any security, confidentiality,
it is usefull to any particular purpose, etc.

